name: Windows

on:
  push: {}
  schedule:
  - cron:  "28 21 * * *"
  workflow_dispatch: {}

jobs:
  build-msvc:
    runs-on: windows-latest
    
    strategy:
      matrix:
        arch: [x86, x64]
        include:
          - arch: x86
            platform: Win32
            # unable to diagnose this error during `import vapoursynth`
            # ImportError: DLL load failed while importing vapoursynth: A dynamic link library (DLL) initialization routine failed.
            test: false
          - arch: x64
            platform: x64
            test: true

    steps:
    - name: Clone VapourSynth
      run: |
        $version=((Invoke-WebRequest https://api.github.com/repos/vapoursynth/vapoursynth/releases/latest).Content | ConvertFrom-JSON).tag_name
        git clone https://github.com/vapoursynth/vapoursynth . --depth 1 --branch $version

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1
  
    - name: Clone Dependencies
      run: |
        git clone https://github.com/vapoursynth/vsrepo --depth 1
        git clone https://github.com/sekrit-twc/zimg --branch v3.0 --depth 1
        git clone https://github.com/AviSynth/AviSynthPlus.git --depth 1
        git clone https://github.com/sekrit-twc/libp2p --depth 1
        git clone https://github.com/microsoft/mimalloc --depth 1

    - name: Build mimalloc
      run: |
        cd mimalloc
        msbuild ide/vs2019/mimalloc.sln /p:Configuration=Release /p:Platform=${{ matrix.arch }}
        cd ..

    - name: Setup Python 3.8
      uses: actions/setup-python@v2
      with:
        # Version range or exact version of a Python version to use, using SemVer's version range syntax.
        python-version: 3.8
        # The target architecture (x86, x64) of the Python interpreter.
        architecture: ${{ matrix.arch }}

    - name: Patch Python 3.8 Include Paths
      run: |
        $py_include_path = ((Split-Path -Path (Get-Command python.exe).Path) + "\include" )
        $py_binary_path = ((Split-Path -Path (Get-Command python.exe).Path) + "\libs" )
        (Get-Content -Path "msvc_project/VSScriptPython38/VSScriptPython38.vcxproj" -Raw) -replace "C:\\Program Files %28x86%29\\Python38-32\\libs",$py_binary_path | Set-Content "msvc_project/VSScriptPython38/VSScriptPython38.vcxproj"
        (Get-Content -Path "msvc_project/VSScriptPython38/VSScriptPython38.vcxproj" -Raw) -replace "C:\\Program Files %28x86%29\\Python38-32\\include",$py_include_path | Set-Content "msvc_project/VSScriptPython38/VSScriptPython38.vcxproj"
        (Get-Content -Path "msvc_project/VSScriptPython38/VSScriptPython38.vcxproj" -Raw) -replace "C:\\Program Files\\Python38\\libs",$py_binary_path | Set-Content "msvc_project/VSScriptPython38/VSScriptPython38.vcxproj"
        (Get-Content -Path "msvc_project/VSScriptPython38/VSScriptPython38.vcxproj" -Raw) -replace "C:\\Program Files\\Python38\\include",$py_include_path | Set-Content "msvc_project/VSScriptPython38/VSScriptPython38.vcxproj"

    - name: Setup Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
        architecture: ${{ matrix.arch }}

    - name: Install cython
      run: |
        python -m pip install --upgrade pip
        pip install cython
        
    - name: Patch Python 3.9 Include Paths
      run: |
        $py_include_path = ((Split-Path -Path (Get-Command python.exe).Path) + "\include" )
        $py_binary_path = ((Split-Path -Path (Get-Command python.exe).Path) + "\libs" )
        (Get-Content -Path "msvc_project\VSScript\VSScript.vcxproj" -Raw) -replace "C:\\Program Files %28x86%29\\Python39-32\\libs",$py_binary_path | Set-Content "msvc_project\VSScript\VSScript.vcxproj"
        (Get-Content -Path "msvc_project\VSScript\VSScript.vcxproj" -Raw) -replace "C:\\Program Files %28x86%29\\Python39-32\\include",$py_include_path | Set-Content "msvc_project\VSScript\VSScript.vcxproj"
        (Get-Content -Path "msvc_project\VSScript\VSScript.vcxproj" -Raw) -replace "C:\\Program Files\\Python39\\libs",$py_binary_path | Set-Content "msvc_project\VSScript\VSScript.vcxproj"
        (Get-Content -Path "msvc_project\VSScript\VSScript.vcxproj" -Raw) -replace "C:\\Program Files\\Python39\\include",$py_include_path | Set-Content "msvc_project\VSScript\VSScript.vcxproj"

    - name: Compile
      run: |
        msbuild msvc_project/VapourSynth.sln /t:Build /p:Configuration=Release /p:Platform=${{ matrix.platform }}

        pip install . --no-deps
        
        
        pushd installer
        $env:SKIP_COMPRESS="yes"
        $env:SKIP_WAIT="yes"
        & ".\make portable.bat"
        
        if ("${{ matrix.arch }}" -eq "x64") {
          pushd buildp64
        } else {
          pushd buildp32
        }
        pip install . --no-deps
        
        
        popd
        popd

    - name: Run test
      if: ${{ matrix.test }}
      run: python -m unittest discover -s test -p "*test.py"
      
    - name: Package
      run: |
        mkdir wheels
        pip install wheel
        python setup.py bdist_wheel -d ./wheels
        python setup.py sdist -d ./wheels --format=zip
        
        pushd installer
        if ("${{ matrix.arch }}" -eq "x64") {
          pushd buildp64
        } else {
          pushd buildp32
        }
        
        python setup.py bdist_wheel -d ../../wheels
        
        popd
        popd
      
    - name: Upload build artefacts
      uses: actions/upload-artifact@v2
      with:
        name: Wheels
        path: |
          wheels/**/*.whl
          wheels/*.whl
          wheels/**/*.zip
          wheels/*.zip
          
  test-windows:
    runs-on: windows-latest
    needs: build-msvc
    strategy:
      matrix:
        arch: [x86, x64]
        
    steps:
    - name: Setup Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
        architecture: ${{ matrix.arch }}

    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        name: Wheels
    
    - name: Try installing
      run: |
        pip install --no-index --find-links . vapoursynth
        pip install --no-index --find-links . vapoursynth_portable
  
  test-linux:
    runs-on: ubuntu-latest
    needs: build-msvc

    env:
      CC: ${{ matrix.cc }}
      CXX: ${{ matrix.cxx }}
      
    strategy:
      matrix:
        include:
          - cc: gcc-10
            cxx: g++-10
          - cc: gcc-11
            cxx: g++-11
      fail-fast: false

    steps:
    - name: Install GCC 11
      if: ${{ matrix.cc == 'gcc-11' }}
      run: |
        sudo apt-get update
        sudo apt-get install g++-11 -y
        sudo apt-get install -y wget jq
        
    - name: Print compiler version
      run: ${{ env.CC }} --version
        
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        # Version range or exact version of a Python version to use, using SemVer's version range syntax.
        python-version: 3.9

    - name: Install cython
      run: |
        python -m pip install --upgrade pip
        pip install cython
    - name: Set PKG_CONFIG_PATH
      run: echo "PKG_CONFIG_PATH=$pythonLocation/lib/pkgconfig" >> $GITHUB_ENV
      
    - name: Install zimg and vapoursynth
      run: |
        VERSION=$(wget -qO- https://api.github.com/repos/vapoursynth/vapoursynth/releases/latest | jq -r ".tag_name")
        git clone https://github.com/vapoursynth/vapoursynth --branch $VERSION --depth 1
        
        pushd vapoursynth
        git clone https://github.com/sekrit-twc/zimg --branch v3.0 --depth 1
        pushd zimg
        ./autogen.sh
        ./configure --prefix=/usr
        make -j2
        sudo make install -j2
        popd
        rm -rf zimg
        
        ./autogen.sh
        ./configure --prefix=/usr
        make -j2
        sudo make install -j2
        popd
        rm -rf vapoursynth
        
    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        name: Wheels
    
    - name: Try installing
      run: |
        pip install --no-index --find-links . vapoursynth

  update-pypi:
    runs-on: ubuntu-latest
    needs:
    - build-msvc
    - test-windows
    - test-linux
    
    steps:
    - name: Setup Python 3.8
      uses: actions/setup-python@v2
      with:
        # Version range or exact version of a Python version to use, using SemVer's version range syntax.
        python-version: 3.8
        
    - name: Determine VapourSynth Version
      id: compare
      run: |
        sudo apt-get install --yes jq wget
        pip install luddite
        PYPI_VERSION=$(python -c 'import luddite;print("R"+luddite.get_version_pypi("vapoursynth"))')
        RELEASE_VERSION=$(wget -qO- https://api.github.com/repos/vapoursynth/vapoursynth/releases/latest | jq -r ".tag_name")
        echo =====================================
        echo $PYPI_VERSION
        echo $RELEASE_VERSION
        if [[ "$PYPI_VERSION" != "$RELEASE_VERSION" ]]; then
          echo UPDATE_VAPOURSYNTH=YES
          echo ::set-output name=update_vapoursynth::yes
        else
          echo UPDATE_VAPOURSYNTH=NO
          echo ::set-output name=update_vapoursynth::no
        fi
        echo =====================================
        
    - name: Download build artifacts
      uses: actions/download-artifact@v2
      if: ${{ steps.compare.outputs.update_vapoursynth == 'yes' }}
      with:
        name: Wheels
        
    - name: Move files
      if: ${{ steps.compare.outputs.update_vapoursynth == 'yes' }}
      run: |
        mkdir vapoursynth
        mkdir vapoursynth_portable
        
        cp VapourSynth-* vapoursynth
        cp VapourSynth_portable-* vapoursynth_portable
        
        ls vapoursynth
        ls vapoursynth_portable
        
    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      if: ${{ steps.compare.outputs.update_vapoursynth == 'yes' }}
      with:
        user: __token__
        password: ${{ secrets.PYPI_VS }}
        packages_dir: vapoursynth/
        
    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      if: ${{ steps.compare.outputs.update_vapoursynth == 'yes' }}
      with:
        user: __token__
        password: ${{ secrets.PYPI_VS_P }}
        packages_dir: vapoursynth_portable/
